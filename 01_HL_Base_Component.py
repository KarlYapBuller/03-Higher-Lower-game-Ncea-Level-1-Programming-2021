#Higher Lower game

import random
import math

#Number Checking Function goes here
def integer_check(question, low=None, high=None):

    situation = ""

    if low is not None and high is not None:
        situation = "both"
    elif low is not None and high is None:
        situation = "low only"

    while True:

        try:
            #Question
            response = int(input(question))

            #Checks if response is not too low or too high
            #If both low and high are specified
            #If the response is too low or too high
            #Message will appear to the User instructing them what to do
            if situation == "both":
                if response < low or response > high:
                    print("Please enter a number between {} and {}".format(low, high))
                    continue

            #Checks response is not too low
            #If response it too low
            #Message will appear to the User instructing them what to do
            elif situation == "low only":
                if response < low:
                    print("Please enter a number that is more than (or equal to) {}".format(low))
                    continue

            elif response == "":
                print("Please input an integer")
                continue


            return response

        #Checks if response is an integer
        except ValueError:
            print("Please enter an integer. You still have {} guesses left.".format(guesses_left))
            continue

#Game Instructions
def game_instructions():
    statement_generator("How to play", "*")
    print("The goal of the Higher Lower game is to guess")
    print("the secret number generated by the computer.")
    print("First you will be asked to enter your ")
    print("low number and then you will be asked to enter your high number")
    print("the secret number will be generated between the two numbers.")
    print("The two numbers are the maximum and minimum range for the secret number you can guess.")
    print("The maximum amount of guesses you are allowed to have depends on the numbers you are guessing between.")
    print("When you try to guess the secret number")
    print("you will be told if you guessed lower or higher than the secret number.")
    print("Good Luck and hopefully you guess the secret number.")
    print("")
    return""

#Played before function, output depends on what the user answers
#If the user answers yes, program continues ask user how many
#Rounds they want to play or if they want to play continuous mode
#If user answers no, game information will display
#If user answers anything other than yes/no, <error> please answer yes/no will appear
def played_before(question):
    valid = False
    while not valid:
        response = input(question).lower()
#If user response is either 'yes' or 'y' the response will be outputed as yes.
        if response == "yes" or response == "y":
            response = "yes"
            return response
#If user response is either 'no' or 'n' the response will be outputed as no.
        elif response == "no" or response == "n":
            response = "no"
            return response
#If user response is anything other than yes or no,user will be asked to answer yes or no.
        else:
            print("<error> please answer yes/no")

def game_history_statistics():
    statement_generator("Game History", "*")
    for game in game_history:
        print(game)
        print()

    #Game History

    #The Game Summary is sorted in numerical order starting from the highest to the lowest
    game_summary.sort()
    #Best Game
    best_game = game_summary[0]
    #Worst Game
    worst_game = game_summary[-1]
    #Average Game
    #Every Number in the Game Summary list is added together and the it is divided by the Number of Numbers in the Game Summary list
    average_game = sum(game_summary)/len(game_summary)

    statement_generator("Game Statistics", "*")
    print("Best Score: {}".format(best_game))
    print("Worst Score: {}".format(worst_game))
    print("Average Score: {:.2f}".format(average_game))
    print()

#Played before function, output depends on what the user answers
#If the user answers yes, program continues to show the
#Game summary which is in the game_history_statistics function
#If user answers no, User will be thanked for playing the game
#If user answers anything other than yes/no, <error> please answer yes/no will appear
def game_summary_question(question):
    valid = False
    while not valid:
        response = input(question).lower()
#If user response is either 'yes' or 'y' the response will be outputed as yes.
        if response == "yes" or response == "y":
            response = "yes"
            return response
#If user response is either 'no' or 'n' the response will be outputed as no.
        elif response == "no" or response == "n":
            response = "no"
            return response
#If user response is anything other than yes or no,user will be asked to answer yes or no.
        else:
            print("<error> please answer yes/no")


#Statement generator
#Decorates the statements in the Lucky Unicorn game
def statement_generator(statement, decoration):

    sides = decoration * 3

    statement = "{} {} {}".format(sides, statement, sides)
    top_bottom = decoration * len(statement)

    print(top_bottom)
    print(statement)
    print(top_bottom)

    return ""

#Main Routine

#Welcomes User to the Higher Lower Game
#Statement is decorated
statement_generator("Welcome to the Higher Lower Game", "*")

#Calls ask user if they have played before funtion and game information function
#Played before statement is decorated
#If the user answers yes, program continues to ask the user how much they want to play with
#If user answers no, game information will display
#If user answers anything other than yes/no, <error> please answer yes/no will appear
print()
statement_generator("Played before", "?")
show_played_before = played_before("Have you played this game before (yes/no)?")
print()

if show_played_before == "no":
    print()
    game_instructions()

#Loops the Higher Lower Game
game_loop = ""
while game_loop == "":

    #Tells the User the Higher Lower Game is going to begin
    statement_generator("Lets get Guessing", "*")

    #Asks the User what they want as there Low Number
    lowest = integer_check("What is your Low Number? ")
    #Asks the User what they want as there High Number
    highest = integer_check("What is your High Number? ", lowest + 1)
    #Ask the User how many rounds they want to play
    rounds = integer_check("How many rounds do you want to play? ", 1)

    #Open lists to put in the Game History and Game Summary
    game_summary = []
    game_history = []

    number_range = highest - lowest + 1
    #Finds Maximum amount of guesses
    max_raw = math.log2(number_range)
    #Rounds Up
    max_upped = math.ceil(max_raw)
    max_guesses = max_upped + 1
    print("You will have {} guesses as the maximum amount of guesses you have".format(max_guesses))

    guesses_allowed = max_guesses

    #Rounds Played
    rounds_played = 0
    #Number of rounds won
    number_won = 0

    #If the number of rounds played is less than the
    #Number of rounds the User wants to play the Higher Lower Game will continue
    while rounds_played < rounds:

        #If the number of rounds played is more than or equal to
        #One the User will be asked if they wish to continue the game or if they wish to
        #Quit the game they should input 'xxx'
        if rounds_played >= 1:
            print()
            game_loop = input("Press <Enter> if you wish to continue the game, if you wish to quit type 'xxx': ")
            print()

        #If the User inputs 'xxx' when they are asked if they want to continue the game or not
        #The Game Loop will end
        if game_loop == "xxx":
            break

        #The Secret Number the User is trying to Guess is generated between the User's Lowest Number and Highest Number
        secret = random.randint(lowest, highest)

        print(secret)

        guess = ""
        #Puts the already guessed number in a list for the no duplicates
        already_guessed = []
        guesses_left = guesses_allowed

        #Indicates the round
        round_start = statement_generator("Round {} of {}".format(rounds_played + 1, rounds), "#")


        while guess != secret and guesses_left >= 1:

            #Asks the User what they think the Secret Number is
            guess = integer_check("What is your Guess: ", lowest, highest)

            #Check that the guess is not a duplicate
            #If the Guess is a Duplicate the User will be informed
            #THe Number of Guesses the User has left will not change
            if guess in already_guessed:
                print("You have already guessed that number! Please try again. "
                      "You *still* have {} guesses left".format(guesses_left))
                continue

            #Takes one guess aqay from the guesses left
            guesses_left -= 1
            #Puts the guess in the already guessed list for the No Duplicates
            already_guessed.append(guess)

            if guesses_left >= 1:

                if guess < secret:
                    statement_generator("Too Low", "!")
                    print("Too low, try a higher number. Guesses left {}.".format(guesses_left))

                elif guess > secret:
                    statement_generator("Too High", "!")
                    print("Too high, try a lower number. Guesses left {}.".format(guesses_left))

            else:
                if guess < secret:
                    statement_generator("Too Low", "!")
                    print("Too low!")
                elif guess > secret:
                    statement_generator("Too High", "!")
                    print("Too high!")

        if guess == secret:
            if guesses_left == guesses_allowed - 1:
                statement_generator("Amazing. You have got it", "*")
                result = "Won ✔"
                number_won += 1
            else:
                statement_generator("Well Done. You have got it", "*")
                result = "Won ✔"
                number_won += 1

        else:
            print("Sorry. You have lost, you have run out of guesses.")
            print("The secret number was {}".format(secret))
            result = "Lost ❌"

        #Increases the Number of Rounds Played by 1
        rounds_played += 1

        #Number of games you have won and guessed the number and the
        #Number of games you have lost that you have not guessed the number

        game_summary.append(guesses_allowed - guesses_left)
        print("Won: {} \t Lost: {}".format(number_won, rounds_played - number_won))

        #The User's Game History for each ROund they played and what the
        #Result for each round was and the Number of Guesses they had left in the ROund
        round_result = "Round {}| {} | Guesses Used: {}".format(rounds_played, result, guesses_allowed - guesses_left)

        #Puts the Round Result in the Game History list
        game_history.append(round_result)

    #Calls game summary question function
    #Game Summary statement is decorated
    #If the user answers yes, program continues to show the
    #User the game summary which includes the game history and statistics
    #User will be thanked for playing the game
    #If user answers no, User will be thanked for playing the game
    #If user answers anything other than yes/no, <error> please answer yes/no will appear
    print()
    statement_generator("Game Summary", "?")
    show_game_summary_question = game_summary_question("Do you want to see your Game Summary (yes/no)?")
    print()

    if show_game_summary_question == "yes":
        print()
        game_history_statistics()

    #Thanks the User for playing the Higher Lower Game
    statement_generator("Thank you for playing the Higher Lower Game", "*")

    #If the User wants to play the Higher Lower Game again the game will loop from the start
    print()
    game_loop = input("Press <Enter> if you wish to continue the game, if you wish to quit type 'xxx': ")
    print()
